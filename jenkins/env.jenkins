pipeline {
  environment {
    PROJECT = "${env.PROJECT}"
    CLUSTER = "clustername" //CLUSTER_BACKOFFICE
    NS_PROJECT_NAME = "${env.PROJECT}"
    BC_DC_PROJECT_NAME = "project name"
    NAMESPACE = "xx-${NS_PROJECT_NAME}"
    BCSOURCE = "${BC_DC_PROJECT_NAME}-builder"
    BCRUNTIME = "${BC_DC_PROJECT_NAME}-runtime"
    DCDEV = "${BC_DC_PROJECT_NAME}-api"
    MAVENOPTS = "'-Xmx1024m -XX:TieredStopAtLevel=1 -XX:GCTimeRatio=4 -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -DskipTests=true'"
  }
  agent any
  parameters {
    string(
      defaultValue: 'dev',
      name: 'PARAM_NAME',
      description: "Paramètre correspondant au nom de la branche à déployer. Par défaut on utilise la branche dev",
      trim: true
    )
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  stages {
    stage('Build Source') {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            echo "Running ${env.BUILD_ID} on ${env.JOB_URL}"
            echo "Project ${PROJECT} | Namespace ${NAMESPACE}"
            COMMIT_OPTION=""
            if (params.PARAM_NAME) {
              echo "Building Source depuis la branche GIT ${params.PARAM_NAME} ..."
              COMMIT_OPTION=" --commit='$params.PARAM_NAME'"
            }else{
              echo "Building Source depuis la branche par défaut ..."
            }
            openshift.withCluster("${CLUSTER}") {
              openshift.withProject("${NAMESPACE}") {
                def bc = openshift.selector("bc", "${BCSOURCE}")
                bc.startBuild("--wait --env=MAVEN_ARGS_APPEND='' --env=HTTP_PROXY='' --env=HTTPS_PROXY='' --env=http_proxy='' --env=https_proxy='' --env=MAVEN_OPTS=${MAVENOPTS}${COMMIT_OPTION}").logs('-f')
              }
            }
          }
        }
      }
    }

    stage('Build Runtime') {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            echo 'Building Runtime ...'
            openshift.withCluster("${CLUSTER}") {
              openshift.withProject("${NAMESPACE}") {
                def bc = openshift.selector("bc", "${BCRUNTIME}")
                bc.startBuild("--wait").logs('-f')
              }
            }
          }
        }
      }
    }
    stage('Confirm Deployment') {
        steps {
            script {
                def userInput = input(
                    id: 'DeploymentConfirmation',
                    message: 'Voulez-vous déployer sur cet environnement ? ',
                    parameters: [
                        [$class: 'BooleanParameterDefinition',
                        defaultValue: false,
                        description: 'Sélectionner pour dpéloyer la branche sur cet environnement',
                        name: "Deploy version [ ${params.PARAM_NAME}] "]
                    ]
                )
                if (!userInput) {
                    error("Déploiement annulé par l'utilisateur.")
                } else {
                    echo "L'utilisateur a validé le déploiement. Proceeding..."
                }
            }
        }
    }
    stage('Deploy Image to dev'){
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            openshift.withCluster("${CLUSTER}") {
              openshift.withProject("${NAMESPACE}") {
                openshift.tag("$BC_RUNTIME}:latest", "${BCRUNTIME}:dev")
              }
            }
          }
        }
      }
    }
    stage('Deploy Availability of dev'){
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            openshift.withCluster("${CLUSTER}") {
              openshift.withProject("${NAMESPACE}") {
                def dc = openshift.selector('dc', "${DCDEV}")
                dc.rollout().status()
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}
